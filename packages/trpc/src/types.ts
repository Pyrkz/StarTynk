/**
 * Auto-generated tRPC type definitions
 * DO NOT MODIFY MANUALLY - This file is generated by scripts/generate-types.ts
 * 
 * Generated on: 2025-08-17T08:54:56.499Z
 */

import type { inferRouterInputs, inferRouterOutputs } from '@trpc/server';
import type { AppRouter } from './root';

/**
 * Type helper to infer input types for all router procedures
 */
export type RouterInputs = inferRouterInputs<AppRouter>;

/**
 * Type helper to infer output types for all router procedures  
 */
export type RouterOutputs = inferRouterOutputs<AppRouter>;

/**
 * Authentication router types
 */
export namespace Auth {
  export type LoginInput = RouterInputs['auth']['login'];
  export type LoginOutput = RouterOutputs['auth']['login'];
  
  export type MobileLoginInput = RouterInputs['auth']['mobileLogin'];
  export type MobileLoginOutput = RouterOutputs['auth']['mobileLogin'];
  
  export type RefreshInput = RouterInputs['auth']['refreshToken'];
  export type RefreshOutput = RouterOutputs['auth']['refreshToken'];
  
  export type MobileRefreshInput = RouterInputs['auth']['mobileRefresh'];
  export type MobileRefreshOutput = RouterOutputs['auth']['mobileRefresh'];
  
  export type MeOutput = RouterOutputs['auth']['me'];
  
  export type LogoutOutput = RouterOutputs['auth']['logout'];
  
  export type VerifyTokenInput = RouterInputs['auth']['verifyToken'];
  export type VerifyTokenOutput = RouterOutputs['auth']['verifyToken'];
  
  export type GetActiveSessionsOutput = RouterOutputs['auth']['getActiveSessions'];
  
  export type RevokeSessionInput = RouterInputs['auth']['revokeSession'];
  export type RevokeSessionOutput = RouterOutputs['auth']['revokeSession'];
}

/**
 * User router types
 */
export namespace User {
  export type ListInput = RouterInputs['user']['list'];
  export type ListOutput = RouterOutputs['user']['list'];
  
  export type GetByIdInput = RouterInputs['user']['getById'];
  export type GetByIdOutput = RouterOutputs['user']['getById'];
  
  export type CreateInput = RouterInputs['user']['create'];
  export type CreateOutput = RouterOutputs['user']['create'];
  
  export type UpdateInput = RouterInputs['user']['update'];
  export type UpdateOutput = RouterOutputs['user']['update'];
  
  export type DeleteInput = RouterInputs['user']['delete'];
  export type DeleteOutput = RouterOutputs['user']['delete'];
  
  export type ChangePasswordInput = RouterInputs['user']['changePassword'];
  export type ChangePasswordOutput = RouterOutputs['user']['changePassword'];
  
  export type GetStatsInput = RouterInputs['user']['getStats'];
  export type GetStatsOutput = RouterOutputs['user']['getStats'];
  
  export type SearchInput = RouterInputs['user']['search'];
  export type SearchOutput = RouterOutputs['user']['search'];
}

/**
 * Project router types
 */
export namespace Project {
  export type ListPublicInput = RouterInputs['project']['listPublic'];
  export type ListPublicOutput = RouterOutputs['project']['listPublic'];
  
  export type ListInput = RouterInputs['project']['list'];
  export type ListOutput = RouterOutputs['project']['list'];
  
  export type GetByIdInput = RouterInputs['project']['getById'];
  export type GetByIdOutput = RouterOutputs['project']['getById'];
  
  export type CreateInput = RouterInputs['project']['create'];
  export type CreateOutput = RouterOutputs['project']['create'];
  
  export type UpdateInput = RouterInputs['project']['update'];
  export type UpdateOutput = RouterOutputs['project']['update'];
  
  export type DeleteInput = RouterInputs['project']['delete'];
  export type DeleteOutput = RouterOutputs['project']['delete'];
  
  export type AddMemberInput = RouterInputs['project']['addMember'];
  export type AddMemberOutput = RouterOutputs['project']['addMember'];
  
  export type RemoveMemberInput = RouterInputs['project']['removeMember'];
  export type RemoveMemberOutput = RouterOutputs['project']['removeMember'];
  
  export type GetStatsInput = RouterInputs['project']['getStats'];
  export type GetStatsOutput = RouterOutputs['project']['getStats'];
}

/**
 * Task router types
 */
export namespace Task {
  export type ListInput = RouterInputs['task']['list'];
  export type ListOutput = RouterOutputs['task']['list'];
  
  export type GetByIdInput = RouterInputs['task']['getById'];
  export type GetByIdOutput = RouterOutputs['task']['getById'];
  
  export type CreateInput = RouterInputs['task']['create'];
  export type CreateOutput = RouterOutputs['task']['create'];
  
  export type UpdateInput = RouterInputs['task']['update'];
  export type UpdateOutput = RouterOutputs['task']['update'];
  
  export type DeleteInput = RouterInputs['task']['delete'];
  export type DeleteOutput = RouterOutputs['task']['delete'];
}

/**
 * Vehicle router types  
 */
export namespace Vehicle {
  export type ListInput = RouterInputs['vehicle']['list'];
  export type ListOutput = RouterOutputs['vehicle']['list'];
  
  export type GetByIdInput = RouterInputs['vehicle']['getById'];
  export type GetByIdOutput = RouterOutputs['vehicle']['getById'];
  
  export type CreateInput = RouterInputs['vehicle']['create'];
  export type CreateOutput = RouterOutputs['vehicle']['create'];
  
  export type UpdateInput = RouterInputs['vehicle']['update'];
  export type UpdateOutput = RouterOutputs['vehicle']['update'];
  
  export type DeleteInput = RouterInputs['vehicle']['delete'];
  export type DeleteOutput = RouterOutputs['vehicle']['delete'];
}

/**
 * System types
 */
export namespace System {
  export type HealthOutput = RouterOutputs['health'];
  export type InfoOutput = RouterOutputs['info'];
}

/**
 * Helper types for common patterns
 */
export type PaginationInput = {
  page: number;
  limit: number;
};

export type PaginationOutput<T> = {
  items: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
};

export type SearchInput = {
  search?: string;
  page?: number;
  limit?: number;
};

export type SortInput = {
  field: string;
  order: 'asc' | 'desc';
};

export type FilterInput<T = Record<string, any>> = T & {
  search?: string;
  sort?: SortInput;
} & PaginationInput;

/**
 * Error types
 */
export type TRPCErrorCode = 
  | 'PARSE_ERROR'
  | 'BAD_REQUEST' 
  | 'UNAUTHORIZED'
  | 'FORBIDDEN'
  | 'NOT_FOUND'
  | 'METHOD_NOT_SUPPORTED'
  | 'TIMEOUT'
  | 'CONFLICT'
  | 'PRECONDITION_FAILED'
  | 'PAYLOAD_TOO_LARGE'
  | 'TOO_MANY_REQUESTS'
  | 'CLIENT_CLOSED_REQUEST'
  | 'INTERNAL_SERVER_ERROR';

export interface TRPCError {
  code: TRPCErrorCode;
  message: string;
  data?: {
    httpStatus?: number;
    zodError?: any;
    requestId?: string;
    timestamp?: string;
  };
}

/**
 * Success response wrapper
 */
export interface SuccessResponse<T = any> {
  success: true;
  data: T;
}

/**
 * Error response wrapper  
 */
export interface ErrorResponse {
  success: false;
  error: TRPCError;
}

/**
 * API response union type
 */
export type APIResponse<T = any> = SuccessResponse<T> | ErrorResponse;
