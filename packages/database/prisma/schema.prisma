generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 Role                  @default(USER)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  invitedBy            String?
  deletedAt            DateTime?
  department           String?
  employmentEndDate    DateTime?
  employmentStartDate  DateTime?
  lastLoginAt          DateTime?
  loginCount           Int                   @default(0)
  phone                String?
  position             String?
  accounts             Account[]
  comments             Comment[]
  deliveryReceipts     Delivery[]
  equipmentAssignments EquipmentAssignment[]
  invitationsSent      InvitationCode[]      @relation("InvitedBy")
  materialOrders       MaterialOrder[]
  coordinatedProjects  Project[]             @relation("ProjectCoordinator")
  createdProjects      Project[]             @relation("ProjectCreator")
  qualityControls      QualityControl[]
  sessions             Session[]
  taskAssignments      TaskAssignment[]
  activityLogs         UserActivityLog[]
  inviterUser          User?                 @relation("InvitedUsers", fields: [invitedBy], references: [id])
  invitedUsers         User[]                @relation("InvitedUsers")
  vehicleAssignments   VehicleAssignment[]
  refreshTokens        RefreshToken[]
  projectAssignments   ProjectAssignment[]
  attendanceRecords    Attendance[]
  leaveRequests        LeaveRequest[]
  approvedLeaves       LeaveRequest[]        @relation("LeaveApprovals")
  payrollRecords       Payroll[]
  bonuses              Bonus[]
  deductions           Deduction[]
  pushTokens           PushToken[]
  syncQueue            SyncQueue[]
  conflictLogs         ConflictLog[]
  idMappings           IdMapping[]
  notificationSchedules NotificationSchedule[]
  notificationLogs     NotificationLog[]
  syncLogs             SyncLog[]

  @@index([invitedBy], map: "users_invitedBy_fkey")
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model InvitationCode {
  id          String    @id @default(cuid())
  code        String    @unique
  email       String
  usedAt      DateTime?
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  invitedBy   String
  lastSentAt  DateTime  @default(now())
  message     String?   @db.Text
  resendCount Int       @default(0)
  role        Role      @default(USER)
  inviter     User      @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@index([invitedBy], map: "invitation_codes_invitedBy_fkey")
  @@map("invitation_codes")
}

model UserActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?  @db.LongText
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@map("user_activity_logs")
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique @db.VarChar(500)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId    String   // Required unique device identifier
  deviceName  String?  // Human readable device name "iPhone 14", "Chrome/Windows"
  userAgent   String?  @db.Text
  ip          String?
  issuedAt    DateTime @default(now())
  expiresAt   DateTime
  revokedAt   DateTime?
  isRevoked   Boolean  @default(false)
  replacedBy  String?  // New token ID after rotation for token family tracking
  loginMethod String   // "email" or "phone" 
  jti         String   @unique // JWT ID for tracking
  
  @@index([userId])
  @@index([deviceId])
  @@index([expiresAt])
  @@index([jti])
  @@index([isRevoked])
  @@map("refresh_tokens")
}

model LoginAttempt {
  id         String   @id @default(cuid())
  identifier String   // email or phone number
  ip         String
  userAgent  String?  @db.Text
  success    Boolean
  reason     String?  // "invalid_password", "account_locked", "invalid_credentials", etc
  deviceId   String?  // Optional device identifier
  createdAt  DateTime @default(now())
  
  @@index([identifier])
  @@index([ip])
  @@index([createdAt])
  @@index([success])
  @@map("login_attempts")
}

model Developer {
  id        String    @id @default(cuid())
  name      String
  address   String?
  contact   String?
  email     String?
  phone     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  projects  Project[]

  @@map("developers")
}

model Project {
  id                 String               @id @default(cuid())
  name               String
  address            String
  developerId        String
  startDate          DateTime
  endDate            DateTime
  baseRate           Decimal              @db.Decimal(10, 2)
  status             ProjectStatus        @default(PLANNING)
  description        String?              @db.Text
  createdById        String
  coordinatorId      String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  apartments         Apartment[]
  deliveries         Delivery[]
  materialOrders     MaterialOrder[]
  coordinator        User?                @relation("ProjectCoordinator", fields: [coordinatorId], references: [id])
  createdBy          User                 @relation("ProjectCreator", fields: [createdById], references: [id])
  developer          Developer            @relation(fields: [developerId], references: [id])
  tasks              Task[]
  projectAssignments ProjectAssignment[]
  attendanceRecords  Attendance[]
  payrollRecords     Payroll[]

  @@index([coordinatorId], map: "projects_coordinatorId_fkey")
  @@index([createdById], map: "projects_createdById_fkey")
  @@index([developerId], map: "projects_developerId_fkey")
  @@map("projects")
}

model Apartment {
  id        String    @id @default(cuid())
  projectId String
  number    String
  floor     Int?
  area      Decimal?  @db.Decimal(8, 2)
  rooms     Int?
  type      String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  project   Project   @relation(fields: [projectId], references: [id])
  tasks     Task[]

  @@unique([projectId, number])
  @@map("apartments")
}

model Task {
  id              String               @id @default(cuid())
  projectId       String
  apartmentId     String?
  title           String
  description     String?              @db.Text
  area            Decimal              @db.Decimal(8, 2)
  rate            Decimal              @db.Decimal(10, 2)
  status          TaskStatus           @default(NEW)
  estimatedHours  Int?
  actualHours     Int?
  priority        TaskPriority         @default(MEDIUM)
  dueDate         DateTime?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?
  payments        PaymentCalculation[]
  qualityControls QualityControl[]
  assignments     TaskAssignment[]
  apartment       Apartment?           @relation(fields: [apartmentId], references: [id])
  project         Project              @relation(fields: [projectId], references: [id])

  @@index([apartmentId], map: "tasks_apartmentId_fkey")
  @@index([projectId], map: "tasks_projectId_fkey")
  @@map("tasks")
}

model TaskAssignment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  role      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
  @@index([userId], map: "task_assignments_userId_fkey")
  @@map("task_assignments")
}

model QualityControl {
  id                String            @id @default(cuid())
  taskId            String
  controllerId      String
  controlNumber     Int               @default(1)
  status            QualityStatus     @default(PENDING)
  completionRate    Int               @default(0)
  notes             String?           @db.Text
  issuesFound       String?           @db.Text
  correctionsNeeded String?           @db.Text
  controlDate       DateTime          @default(now())
  recontrolDate     DateTime?
  issueType         QualityIssueType?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  controller        User              @relation(fields: [controllerId], references: [id])
  task              Task              @relation(fields: [taskId], references: [id])

  @@index([controllerId], map: "quality_controls_controllerId_fkey")
  @@index([taskId], map: "quality_controls_taskId_fkey")
  @@map("quality_controls")
}

model MaterialCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  materials   Material[]

  @@map("material_categories")
}

model Material {
  id            String              @id @default(cuid())
  name          String
  categoryId    String
  unit          String
  price         Decimal?            @db.Decimal(10, 2)
  supplier      String?
  description   String?             @db.Text
  imageUrl      String?
  stockLevel    Int                 @default(0)
  minStock      Int                 @default(0)
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletedAt     DateTime?
  deliveryItems DeliveryItem[]
  orderItems    MaterialOrderItem[]
  category      MaterialCategory    @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "materials_categoryId_fkey")
  @@map("materials")
}

model MaterialOrder {
  id          String                 @id @default(cuid())
  projectId   String
  orderedById String
  status      material_orders_status @default(NEW)
  totalAmount Decimal?               @db.Decimal(10, 2)
  notes       String?                @db.Text
  orderDate   DateTime               @default(now())
  neededDate  DateTime?
  isActive    Boolean                @default(true)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deletedAt   DateTime?
  items       MaterialOrderItem[]
  orderedBy   User                   @relation(fields: [orderedById], references: [id])
  project     Project                @relation(fields: [projectId], references: [id])

  @@index([orderedById], map: "material_orders_orderedById_fkey")
  @@index([projectId], map: "material_orders_projectId_fkey")
  @@map("material_orders")
}

model MaterialOrderItem {
  id         String        @id @default(cuid())
  orderId    String
  materialId String
  quantity   Int
  unitPrice  Decimal       @db.Decimal(10, 2)
  notes      String?
  material   Material      @relation(fields: [materialId], references: [id])
  order      MaterialOrder @relation(fields: [orderId], references: [id])

  @@unique([orderId, materialId])
  @@index([materialId], map: "material_order_items_materialId_fkey")
  @@map("material_order_items")
}

model EquipmentCategory {
  id          String      @id @default(cuid())
  name        String
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  equipment   Equipment[]

  @@map("equipment_categories")
}

model Equipment {
  id            String                @id @default(cuid())
  name          String
  categoryId    String
  serialNumber  String?
  purchaseDate  DateTime?
  purchasePrice Decimal?              @db.Decimal(10, 2)
  status        EquipmentStatus       @default(AVAILABLE)
  condition     String?
  description   String?               @db.Text
  imageUrl      String?
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  deletedAt     DateTime?
  category      EquipmentCategory     @relation(fields: [categoryId], references: [id])
  assignments   EquipmentAssignment[]
  history       EquipmentHistory[]

  @@index([categoryId], map: "equipment_categoryId_fkey")
  @@map("equipment")
}

model EquipmentAssignment {
  id           String    @id @default(cuid())
  equipmentId  String
  userId       String
  assignedDate DateTime  @default(now())
  returnDate   DateTime?
  notes        String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  equipment    Equipment @relation(fields: [equipmentId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@index([equipmentId], map: "equipment_assignments_equipmentId_fkey")
  @@index([userId], map: "equipment_assignments_userId_fkey")
  @@map("equipment_assignments")
}

model EquipmentHistory {
  id          String                 @id @default(cuid())
  equipmentId String
  action      EquipmentHistoryAction
  userId      String?
  description String?                @db.Text
  actionDate  DateTime               @default(now())
  isActive    Boolean                @default(true)
  createdAt   DateTime               @default(now())
  equipment   Equipment              @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId], map: "equipment_history_equipmentId_fkey")
  @@map("equipment_history")
}

model Delivery {
  id           String            @id @default(cuid())
  projectId    String
  supplierName String
  deliveryDate DateTime          @default(now())
  receivedById String
  status       deliveries_status @default(PENDING)
  deliveryType String
  totalWeight  Decimal?          @db.Decimal(8, 2)
  notes        String?           @db.Text
  documentUrl  String?
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deletedAt    DateTime?
  project      Project           @relation(fields: [projectId], references: [id])
  receivedBy   User              @relation(fields: [receivedById], references: [id])
  items        DeliveryItem[]

  @@index([projectId], map: "deliveries_projectId_fkey")
  @@index([receivedById], map: "deliveries_receivedById_fkey")
  @@map("deliveries")
}

model DeliveryItem {
  id                String   @id @default(cuid())
  deliveryId        String
  materialId        String
  orderedQuantity   Int
  deliveredQuantity Int
  qualityStatus     String?
  notes             String?
  delivery          Delivery @relation(fields: [deliveryId], references: [id])
  material          Material @relation(fields: [materialId], references: [id])

  @@unique([deliveryId, materialId])
  @@index([materialId], map: "delivery_items_materialId_fkey")
  @@map("delivery_items")
}

model Vehicle {
  id               String               @id @default(cuid())
  make             String
  model            String
  year             Int
  licensePlate     String               @unique
  vin              String?
  insuranceExpiry  DateTime?
  inspectionExpiry DateTime?
  purchaseDate     DateTime?
  purchasePrice    Decimal?             @db.Decimal(10, 2)
  status           VehicleStatus        @default(ACTIVE)
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  deletedAt        DateTime?
  assignments      VehicleAssignment[]
  maintenances     VehicleMaintenance[]
  reminders        VehicleReminder[]

  @@map("vehicles")
}

model VehicleAssignment {
  id        String    @id @default(cuid())
  vehicleId String
  userId    String
  startDate DateTime  @default(now())
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])

  @@index([userId], map: "vehicle_assignments_userId_fkey")
  @@index([vehicleId], map: "vehicle_assignments_vehicleId_fkey")
  @@map("vehicle_assignments")
}

model VehicleMaintenance {
  id              String          @id @default(cuid())
  vehicleId       String
  type            MaintenanceType
  description     String          @db.Text
  cost            Decimal         @db.Decimal(10, 2)
  serviceDate     DateTime
  nextDueDate     DateTime?
  mileage         Int?
  serviceProvider String?
  invoiceUrl      String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  vehicle         Vehicle         @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId], map: "vehicle_maintenances_vehicleId_fkey")
  @@map("vehicle_maintenances")
}

model VehicleReminder {
  id          String       @id @default(cuid())
  vehicleId   String
  type        ReminderType
  dueDate     DateTime
  description String
  daysBefore  Int          @default(7)
  isCompleted Boolean      @default(false)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  vehicle     Vehicle      @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId], map: "vehicle_reminders_vehicleId_fkey")
  @@map("vehicle_reminders")
}

model Photo {
  id          String    @id @default(cuid())
  url         String
  description String?
  type        PhotoType
  entityType  String
  entityId    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("photos")
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  authorId   String
  entityType String
  entityId   String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "comments_authorId_fkey")
  @@map("comments")
}

model PaymentCalculation {
  id             String    @id @default(cuid())
  taskId         String
  area           Decimal   @db.Decimal(8, 2)
  rate           Decimal   @db.Decimal(10, 2)
  completionRate Int
  amount         Decimal   @db.Decimal(10, 2)
  isPaid         Boolean   @default(false)
  paidAt         DateTime?
  notes          String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  task           Task      @relation(fields: [taskId], references: [id])

  @@index([taskId], map: "payment_calculations_taskId_fkey")
  @@map("payment_calculations")
}

model ProjectAssignment {
  id             String    @id @default(cuid())
  userId         String
  projectId      String
  assignedDate   DateTime  @default(now())
  unassignedDate DateTime?
  role           String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  project        Project   @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId, assignedDate])
  @@index([userId], map: "project_assignments_userId_fkey")
  @@index([projectId], map: "project_assignments_projectId_fkey")
  @@map("project_assignments")
}

model Attendance {
  id            String    @id @default(cuid())
  userId        String
  projectId     String
  date          DateTime
  checkIn       DateTime?
  checkOut      DateTime?
  hoursWorked   Decimal?  @db.Decimal(4, 2)
  overtimeHours Decimal?  @db.Decimal(4, 2)
  status        String?
  notes         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  project       Project   @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId, date])
  @@index([userId], map: "attendance_userId_fkey")
  @@index([projectId], map: "attendance_projectId_fkey")
  @@map("attendance")
}

model LeaveRequest {
  id           String      @id @default(cuid())
  userId       String
  type         LeaveType
  startDate    DateTime
  endDate      DateTime
  reason       String?     @db.Text
  status       LeaveStatus @default(PENDING)
  approvedById String?
  approvedDate DateTime?
  notes        String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  approvedBy   User?       @relation("LeaveApprovals", fields: [approvedById], references: [id])

  @@index([userId], map: "leave_requests_userId_fkey")
  @@index([approvedById], map: "leave_requests_approvedById_fkey")
  @@map("leave_requests")
}

model Payroll {
  id              String        @id @default(cuid())
  userId          String
  projectId       String?
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  hoursWorked     Decimal       @db.Decimal(6, 2)
  overtimeHours   Decimal       @db.Decimal(6, 2) @default(0)
  hourlyRate      Decimal       @db.Decimal(10, 2)
  overtimeRate    Decimal       @db.Decimal(10, 2)
  baseAmount      Decimal       @db.Decimal(10, 2)
  overtimeAmount  Decimal       @db.Decimal(10, 2) @default(0)
  bonusAmount     Decimal       @db.Decimal(10, 2) @default(0)
  deductionAmount Decimal       @db.Decimal(10, 2) @default(0)
  totalAmount     Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  paymentDate     DateTime?
  notes           String?       @db.Text
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  project         Project?      @relation(fields: [projectId], references: [id])
  bonuses         Bonus[]
  deductions      Deduction[]

  @@index([userId], map: "payroll_userId_fkey")
  @@index([projectId], map: "payroll_projectId_fkey")
  @@map("payroll")
}

model Bonus {
  id          String    @id @default(cuid())
  userId      String
  payrollId   String?
  type        BonusType
  amount      Decimal   @db.Decimal(10, 2)
  description String?
  date        DateTime  @default(now())
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  payroll     Payroll?  @relation(fields: [payrollId], references: [id])

  @@index([userId], map: "bonuses_userId_fkey")
  @@index([payrollId], map: "bonuses_payrollId_fkey")
  @@map("bonuses")
}

model Deduction {
  id          String        @id @default(cuid())
  userId      String
  payrollId   String?
  type        DeductionType
  amount      Decimal       @db.Decimal(10, 2)
  description String?
  date        DateTime      @default(now())
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  payroll     Payroll?      @relation(fields: [payrollId], references: [id])

  @@index([userId], map: "deductions_userId_fkey")
  @@index([payrollId], map: "deductions_payrollId_fkey")
  @@map("deductions")
}

model PushToken {
  id            String    @id @default(cuid())
  userId        String
  token         String    @unique @db.VarChar(255)
  platform      Platform
  deviceId      String
  deviceName    String?
  deviceModel   String?
  osVersion     String?
  appVersion    String?
  locale        String?   @default("en")
  timezone      String?
  isActive      Boolean   @default(true)
  isSandbox     Boolean   @default(false)
  lastUsedAt    DateTime  @default(now())
  failureCount  Int       @default(0)
  lastError     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, deviceId])
  @@index([userId, isActive])
  @@index([token])
  @@index([platform])
  @@map("push_tokens")
}

model SyncQueue {
  id            String    @id @default(cuid())
  userId        String
  deviceId      String
  entityType    String    // 'attendance', 'task', 'material', etc.
  entityId      String?   // Local ID before server assigns real ID
  serverId      String?   // Server-assigned ID after sync
  operation     SyncOperation
  payload       Json
  checksum      String    // For data integrity
  priority      Int       @default(5) // 1-10, 1 being highest
  retryCount    Int       @default(0)
  maxRetries    Int       @default(3)
  status        SyncStatus @default(PENDING)
  error         String?   @db.Text
  syncedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  scheduledFor  DateTime? // For delayed sync
  batchId       String?   // For batch operations
  
  user          User      @relation(fields: [userId], references: [id])
  
  @@index([userId, status, priority])
  @@index([deviceId, status])
  @@index([batchId])
  @@index([scheduledFor])
  @@index([createdAt])
  @@map("sync_queue")
}

model ConflictLog {
  id           String           @id @default(cuid())
  userId       String
  deviceId     String
  entityType   String
  entityId     String
  clientData   Json
  serverData   Json
  resolution   String           // CLIENT_WINS, SERVER_WINS, MERGE, MANUAL_RESOLVE
  resolvedData Json?
  syncQueueId  String?          // Reference to sync queue item
  createdAt    DateTime         @default(now())
  user         User             @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([deviceId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("conflict_logs")
}

model IdMapping {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String
  entityType  String
  tempId      String   // Temporary/local ID
  serverId    String   // Server-assigned ID
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  
  @@unique([tempId, entityType])
  @@index([userId])
  @@index([deviceId])
  @@index([serverId, entityType])
  @@map("id_mappings")
}

model NotificationSchedule {
  id            String   @id @default(cuid())
  userId        String?  // null for broadcast
  title         String
  body          String
  data          Json?
  scheduledFor  DateTime
  status        NotificationStatus @default(PENDING)
  sentAt        DateTime?
  error         String?
  retryCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  
  @@index([scheduledFor, status])
  @@index([userId])
  @@map("notification_schedules")
}

model NotificationLog {
  id            String    @id @default(cuid())
  userId        String?   // null for broadcast
  title         String
  body          String    @db.Text
  data          Json?
  type          NotificationType
  priority      NotificationPriority
  channel       String    @default("default")
  status        NotificationStatus @default(PENDING)
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  error         String?
  retryCount    Int       @default(0)
  pushTokenId   String?
  createdAt     DateTime  @default(now())
  
  user          User?     @relation(fields: [userId], references: [id])
  
  @@index([userId, status])
  @@index([type])
  @@index([createdAt])
  @@map("notification_logs")
}

model CachePolicy {
  id            String    @id @default(cuid())
  entityType    String    @unique
  ttl           Int       // seconds
  staleTime     Int       // seconds
  cacheTime     Int       // seconds
  maxAge        Int       // seconds
  strategy      CacheStrategy // NETWORK_FIRST, CACHE_FIRST, etc.
  priority      Int       @default(5)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("cache_policies")
}

model SyncLog {
  id            String    @id @default(cuid())
  userId        String
  deviceId      String
  syncType      String    // FULL, PARTIAL, DELTA
  direction     String    // UPLOAD, DOWNLOAD, BIDIRECTIONAL
  entityCounts  Json      // { attendance: 5, tasks: 10 }
  startedAt     DateTime
  completedAt   DateTime?
  duration      Int?      // milliseconds
  status        SyncStatus
  error         String?
  metadata      Json?
  
  user          User      @relation(fields: [userId], references: [id])
  
  @@index([userId, status])
  @@index([deviceId])
  @@index([startedAt])
  @@map("sync_logs")
}

enum Platform {
  IOS
  ANDROID
}

enum SyncOperation {
  CREATE
  UPDATE
  DELETE
  BATCH
}

enum SyncStatus {
  PENDING
  QUEUED
  SYNCING
  SUCCESS
  FAILED
  CANCELLED
  CONFLICT
}

enum NotificationType {
  TASK_ASSIGNED
  ATTENDANCE_REMINDER
  PAYMENT_PROCESSED
  SYSTEM_ALERT
  CHAT_MESSAGE
  SCHEDULE_CHANGE
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  EXPIRED
}

enum CacheStrategy {
  NETWORK_FIRST
  CACHE_FIRST
  NETWORK_ONLY
  CACHE_ONLY
  CACHE_AND_NETWORK
  STALE_WHILE_REVALIDATE
}

enum Role {
  USER
  ADMIN
  MODERATOR
  COORDINATOR
  WORKER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  NEW
  IN_PROGRESS
  READY_FOR_PICKUP
  APPROVED
  PAID
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum QualityStatus {
  PENDING
  APPROVED
  REJECTED
  PARTIALLY_APPROVED
}

enum QualityIssueType {
  OUR_FAULT
  EXTERNAL_FAULT
  MATERIAL_DEFECT
  DESIGN_ISSUE
}

enum EquipmentStatus {
  AVAILABLE
  ASSIGNED
  DAMAGED
  RETIRED
}

enum EquipmentHistoryAction {
  ASSIGNED
  RETURNED
  DAMAGED
  REPAIRED
  RETIRED
  PURCHASED
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
}

enum MaintenanceType {
  INSPECTION
  REPAIR
  SERVICE
  INSURANCE
}

enum ReminderType {
  INSPECTION
  INSURANCE
  SERVICE
  REPAIR
}

enum PhotoType {
  BEFORE
  AFTER
  ISSUE
  DOCUMENTATION
  INVOICE
}

enum material_orders_status {
  NEW
  IN_PROGRESS
  PARTIALLY_DELIVERED
  COMPLETED
  CANCELLED
}

enum deliveries_status {
  PENDING
  RECEIVED
  QUALITY_CHECK
  ACCEPTED
  REJECTED
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  MATERNITY
  PATERNITY
  UNPAID
  BEREAVEMENT
  EMERGENCY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  CREDIT_CARD
  DIGITAL_WALLET
}

enum BonusType {
  PERFORMANCE
  PROJECT_COMPLETION
  OVERTIME
  HOLIDAY
  REFERRAL
  RETENTION
  SAFETY
  QUALITY
}

enum DeductionType {
  TAX
  INSURANCE
  LOAN
  ADVANCE
  DISCIPLINARY
  EQUIPMENT_DAMAGE
  UNIFORM
  OTHER
}