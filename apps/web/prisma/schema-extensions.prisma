// This file contains the new models for the employee and payroll system
// To be added to the main schema.prisma file after the PaymentCalculation model

model ProjectAssignment {
  id            String    @id @default(cuid())
  userId        String
  projectId     String
  assignedDate  DateTime  @default(now())
  unassignedDate DateTime?
  role          String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  project       Project   @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId, assignedDate])
  @@index([userId], map: "project_assignments_userId_fkey")
  @@index([projectId], map: "project_assignments_projectId_fkey")
  @@map("project_assignments")
}

model Attendance {
  id            String    @id @default(cuid())
  userId        String
  projectId     String
  date          DateTime
  checkIn       DateTime?
  checkOut      DateTime?
  hoursWorked   Decimal?  @db.Decimal(4, 2)
  overtimeHours Decimal?  @db.Decimal(4, 2)
  status        String?
  notes         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  project       Project   @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId, date])
  @@index([userId], map: "attendance_userId_fkey")
  @@index([projectId], map: "attendance_projectId_fkey")
  @@map("attendance")
}

model LeaveRequest {
  id           String      @id @default(cuid())
  userId       String
  type         LeaveType
  startDate    DateTime
  endDate      DateTime
  reason       String?     @db.Text
  status       LeaveStatus @default(PENDING)
  approvedById String?
  approvedDate DateTime?
  notes        String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  approvedBy   User?       @relation("LeaveApprovals", fields: [approvedById], references: [id])

  @@index([userId], map: "leave_requests_userId_fkey")
  @@index([approvedById], map: "leave_requests_approvedById_fkey")
  @@map("leave_requests")
}

model Payroll {
  id              String        @id @default(cuid())
  userId          String
  projectId       String?
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  hoursWorked     Decimal       @db.Decimal(6, 2)
  overtimeHours   Decimal       @db.Decimal(6, 2) @default(0)
  hourlyRate      Decimal       @db.Decimal(10, 2)
  overtimeRate    Decimal       @db.Decimal(10, 2)
  baseAmount      Decimal       @db.Decimal(10, 2)
  overtimeAmount  Decimal       @db.Decimal(10, 2) @default(0)
  bonusAmount     Decimal       @db.Decimal(10, 2) @default(0)
  deductionAmount Decimal       @db.Decimal(10, 2) @default(0)
  totalAmount     Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  paymentDate     DateTime?
  notes           String?       @db.Text
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  project         Project?      @relation(fields: [projectId], references: [id])
  bonuses         Bonus[]
  deductions      Deduction[]

  @@index([userId], map: "payroll_userId_fkey")
  @@index([projectId], map: "payroll_projectId_fkey")
  @@map("payroll")
}

model Bonus {
  id          String    @id @default(cuid())
  userId      String
  payrollId   String?
  type        BonusType
  amount      Decimal   @db.Decimal(10, 2)
  description String?
  date        DateTime  @default(now())
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  payroll     Payroll?  @relation(fields: [payrollId], references: [id])

  @@index([userId], map: "bonuses_userId_fkey")
  @@index([payrollId], map: "bonuses_payrollId_fkey")
  @@map("bonuses")
}

model Deduction {
  id          String        @id @default(cuid())
  userId      String
  payrollId   String?
  type        DeductionType
  amount      Decimal       @db.Decimal(10, 2)
  description String?
  date        DateTime      @default(now())
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  payroll     Payroll?      @relation(fields: [payrollId], references: [id])

  @@index([userId], map: "deductions_userId_fkey")
  @@index([payrollId], map: "deductions_payrollId_fkey")
  @@map("deductions")
}